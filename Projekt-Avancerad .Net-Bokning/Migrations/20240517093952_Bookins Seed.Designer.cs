// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Projekt_Avancerad_.Net_Bokning.Data;

#nullable disable

namespace Projekt_Avancerad_.Net_Bokning.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240517093952_Bookins Seed")]
    partial class BookinsSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Projekt_Models.Appointment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("AppointDiscription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PlacedApp")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            id = 1,
                            AppointDiscription = "Initial Consultation",
                            CompanyId = 1,
                            CustomerId = 1,
                            PlacedApp = new DateTime(2011, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            id = 2,
                            AppointDiscription = "Second Consultation",
                            CompanyId = 1,
                            CustomerId = 1,
                            PlacedApp = new DateTime(2011, 6, 29, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            id = 3,
                            AppointDiscription = "Third Consultation",
                            CompanyId = 1,
                            CustomerId = 1,
                            PlacedApp = new DateTime(2011, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            id = 4,
                            AppointDiscription = "Initial Consultation",
                            CompanyId = 2,
                            CustomerId = 2,
                            PlacedApp = new DateTime(2011, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Projekt_Models.BookingHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("ChangeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("BookingHistories");
                });

            modelBuilder.Entity("Projekt_Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.ToTable("companies");

                    b.HasData(
                        new
                        {
                            CompanyId = 1,
                            CompanyName = "SaabParts"
                        },
                        new
                        {
                            CompanyId = 2,
                            CompanyName = "VoloParts"
                        },
                        new
                        {
                            CompanyId = 3,
                            CompanyName = "Macken"
                        });
                });

            modelBuilder.Entity("Projekt_Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FristName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("CustomerId");

                    b.ToTable("customer");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Adress = "1234 Main St",
                            Email = "annaecool@hotmail.com",
                            FristName = "Anna",
                            LastName = "Svensson",
                            Phone = "123-456-7890"
                        },
                        new
                        {
                            CustomerId = 2,
                            Adress = "Vivolvägen 12",
                            Email = "R41nFire@hotmail.com",
                            FristName = "Jonas",
                            LastName = "Hellqvist",
                            Phone = "7778889932"
                        },
                        new
                        {
                            CustomerId = 3,
                            Adress = "Hästhagen 3",
                            Email = "bilarebra@hotmail.com",
                            FristName = "Stefan",
                            LastName = "Magnusson",
                            Phone = "7778889932"
                        },
                        new
                        {
                            CustomerId = 4,
                            Adress = "Hagelbrakare 41",
                            Email = "fettmedraggarvalle@hotmail.com",
                            FristName = "Ronny",
                            LastName = "Ronnysson",
                            Phone = "7778889932"
                        },
                        new
                        {
                            CustomerId = 5,
                            Adress = "Hagelbrakare 42",
                            Email = "fettmedraggarvalle111@hotmail.com",
                            FristName = "Ragge",
                            LastName = "Raggesson",
                            Phone = "7778889932"
                        });
                });

            modelBuilder.Entity("Projekt_Models.Appointment", b =>
                {
                    b.HasOne("Projekt_Models.Company", "Company")
                        .WithMany("Appointments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projekt_Models.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Projekt_Models.BookingHistory", b =>
                {
                    b.HasOne("Projekt_Models.Appointment", "Appointment")
                        .WithMany("BookingHistories")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Projekt_Models.Appointment", b =>
                {
                    b.Navigation("BookingHistories");
                });

            modelBuilder.Entity("Projekt_Models.Company", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Projekt_Models.Customer", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
